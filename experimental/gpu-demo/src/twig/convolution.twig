arrayJniLength = [ jni(array(X)) -> int ] {
  $out = (*env)->GetArrayLength(env,$in);
}

arrayGpuLength = [ gpu(array(X)) -> int ] {
  $out = $in->len;
}

arrayJniToC = [ jni(array(double)) -> (array(double),int) ] {
  $out2 = (*env)->GetArrayLength(env,$in);
  $out1 = malloc($out2 * sizeof(double));
  (*env)->GetDoubleArrayRegion(env,jsrc,0,len,src);
} {
  free($out1);
}

kernel = [ gpu(array(double)) -> gpu(array(double)) ] {
  int $i;
  for($i=0; $i < $in->len; $i++) {
    // useless kernel operation
    $in->data[$i] /= 2.0;
  }
}

arrayCToJni = [ (array(double),int) -> jni(array(double)) ] {
  $out = (*env)->NewDoubleArray(env,$in2);
  (*env)->SetDoubleArrayRegion(env,$out,0,$in2,$in1);
}

arrayGpuToC = [ gpu(array(double)) -> (array(double),int) ] {
  $out2 = $in->len;
  $out1 = malloc($in->len * sizeof(double));
  int $i;
  for($i = 0; $i < $in->len; $i++) {
    $out1[$i] = $in->data[$i];
  }
} {
  free($out1);
}

arrayCToGpu = [ (array(double),int) -> gpu(array(double)) ] {
  $out = malloc(sizeof(GPU));
  strcpy($out->id,"Psuedo GPU");
  $out->len = $in2;
  $out->data = malloc($in2 * sizeof(double));
  int $i;
  for($i=0; $i < $in2; $i++) {
    $out->data[$i] = $in1[$i];
  }
} {
  if($out->data != NULL) {
    free($out->data);
  }
  free($out);
}

arrayJniToGpu = [ jni(array(double)) -> gpu(array(double)) ] {
  $out = malloc(sizeof(GPU));
  strcpy($out->id,"Psuedo GPU");
  $out->len = (*env)->GetArrayLength(env,$in);
  $out->data = malloc($out->len * sizeof(double));
  (*env)->GetDoubleArrayRegion(env,$in,0,$out->len,$out->data);
} {
  if($out->data != NULL) {
    free($out->data);
  }
  free($out);
}

arrayGpuToJni = [ gpu(array(double)) -> jni(array(double)) ] {
  $out = (*env)->NewDoubleArray(env,$in->len);
  (*env)->SetDoubleArrayRegion(env,$out,0,$in->len,$in->data);
}

invokeKernel = arrayCToGPU;kernel;arrayGPUToC
main = arrayJniToC;invokeKernel;arrayCToJni

reduce arrayJniToC;arrayCToGpu => arrayJniToGpu
reduce arrayGpuToC;arrayCToJni => arrayGpuToJni
