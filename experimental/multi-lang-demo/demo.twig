--@language(Python)

-- Take apart an Address object

name = [address -> py(string)] <<<
  $out = $in.name
>>>

age = [address -> py(int)] <<<
  $out = $in.age
>>>

-- Convert Python to JSON

py_int_to_json = [py(int) -> py(json(int))] <<<
  $out = int_to_json($in)
>>>

py_string_to_json = [py(string) -> py(json(string))] <<<
  $out = string_to_json($in)
>>>

py_tuple_to_json = [(py(json(X)),py(json(Y))) -> py(json(pair(X,Y)))] <<<
  $out = '[' + ','.join($in1,$in2) + ']'
>>>

py_to_json_step = py_int_to_json | py_string_to_json | py_tuple_to_json

py_to_json = fix(X, (#all(X) | T) ; py_to_json_step)

py_address_to_json = @2;{name,age};py_to_json


--@language(C)

-- Convert Python JSON to C JSON

py_json_to_c = [py(json(X)) -> json(X)] <<<
  json_error_t tmp1;
  char *tmp2 = PyString_AsString($in);
  $out = json_loads(tmp2, JSON_DECODE_ANY, &tmp1);
>>>


-- Convert JSON to C

json_to_tuple = [json(pair(X,Y)) -> (json(X),json(Y))] <<<
  $out1 = json_array_get($in,0);
  $out2 = json_array_get($in,1);
>>>

json_to_int = [json(int) -> int] <<<
  $out = json_int_value($in);
>>>

json_to_string = [json(string) -> string] <<<
  $out = json_string_value($in);
>>>

from_json_step = json_to_int | json_to_string | json_to_tuple

from_json = fix(X, from_json_step ; (#all(X) | T))


-- Convert Python to C directly

py_string_to_c = [py(string) -> string] <<<
  $out = PyString_AsString($in);
>>>

py_int_to_c = [py(int) -> int] <<<
  $out = (int)PyInt_AsLong($in);
>>>

py_to_c_step = py_string_to_c | py_int_to_c

py_to_c = fix(X, (py_to_c_step | #all(py_to_c_step)) ; (#all(X) | T))


-- Main program

main = py_address_to_json;py_json_to_c;from_json

--@reduce py_to_json;json_to_c;from_json => py_to_c
main2 = @2;{name,age};py_to_c