--@Language(Python)

py_int_to_json = [py(int) -> py(json(int))] <<<
  $out = int_to_json($in)
>>>

py_string_to_json = [py(string) -> py(json(string))] <<<
  $out = string_to_json($in)
>>>

py_tuple_to_json = [(py(json(X)),py(json(Y))) -> py(json(pair(X,Y)))] <<<
  $out = '[' + ','.join($in1,$in2) + ']'
>>>

py_to_json = py_int_to_json | py_string_to_json | py_tuple_to_json

name = [address -> py(string)] <<<
  $out = $in.name
>>>

age = [address -> py(int)] <<<
  $out = $in.age
>>>

py_address_to_json = @2;{name,age};{py_to_json,py_to_json};py_to_json


--@Language(C)

-- Herein lies the issue...
py_json_to_c = [py(json(X)) -> json(X)] <<<
  json_error_t tmp1;
  char *s = PyString_AsString($in);
  $out = json_loads(s, JSON_DECODE_ANY, &tmp1);
>>>

json_to_tuple = [json(pair(X,Y)) -> (json(X),json(Y))] <<<
  $out1 = json_array_get($in,0);
  $out2 = json_array_get($in,1);
>>>

json_to_int = [json(int) -> int] <<<
  $out = json_int_value($in);
>>>

json_to_string = [json(string) -> string] <<<
  $out = json_string_value($in);
>>>

from_json = json_to_int | json_to_string | json_to_tuple

json_to_address = from_json;{from_json,from_json}

-- Main program

main = py_address_to_json;py_json_to_c;json_to_address

-- @reduce py_to_json;py_json_to_c;from_json => transmit
-- @reduce {py_to_json,py_to_json};py_json_to_c;{from_json,from_json} => transmit
-- @2;{name,age};{py_to_json,py_to_json};py_to_json;
-- transmit;
-- from_json;{from_json,from_json}
