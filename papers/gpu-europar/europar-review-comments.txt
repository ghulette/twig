On behalf of the Euro-Par program committee, we are pleased to
inform you that your submission:

  1569569265: A Type-based Approach to Separating Protocol from
  Application Logic: A Case Study in Hybrid Computer Programming

has been accepted for inclusion in the technical program and the
proceedings of Euro-Par 2012.

We received 228 submissions this year, out of which 75 were
accepted, leading to an acceptance rate of about 32.9%. Attached
are the referee reports on your submission. Please, read the
reports and take them into consideration when preparing the final
copy of the paper.

Please, note that each accepted paper must be accompanied by a
conference registration, and that it is required to sign the
Springer copyright transfer form. Note also that the deadline for
camera-ready submission is June 1st. Instructions on how to format
and submit your final paper are available at
<http://europar2012.cti.gr/>.

Information about registration, hotel accommodation, and a
preliminary program will be made available soon on the conference
web site <http://europar2012.cti.gr/>.

Congratulations and thank you for your submission to Euro-Par
2012. We look forward to meeting you and your colleagues in
Rhodes.

Best regards,
Euro-Par 2012 co-chairs:
  Christos Kaklamanis, CTI and University of Patras
  Theodore Papatheodorou, University of Patras
  Paul Spirakis, CTI and University of Patras

================================================================

All reviews are available at your personal home page
<http://edas.info/showPaper.php?m=1569569265>. Here is a copy for
your convenience.

======= Review 1 =======

> *** Comments: Comments to author

In this paper a high-level programming language call Twig is
presented. The work is clearly presented, but the related work can
be enhanced with updated works such as Insieme project and Insieme
Parallel Intermidiate Representation (Isnpire).

======= Review 2 =======

> *** Comments: Comments to author

This paper presents Twig, a novel Haskell-based system for
generating code for GPU languages such as OpenCL and CUDA. It
primarily focuses on managing the location of data, whether in
host memory or GPU device memory, which the authors identify as an
error-prone programming problem that may be automated and
optimized. The authors use Haskell-flavored type expressions to
represent the location of a datum as a type.

GPU kernel operations are represented in Twig as rules that
operate on typed inputs and outputs. The Twig code generator takes
rules and generates C code, automatically producing data transfer
operations among memory locations. Thus, programming effort in
managing data location is eliminated, and certain automatic
optimizations, such as avoiding unnecessary data transfers, are
possible.

The overall idea and its presentation are good and potentially
very useful. User programs can be written as relatively simple
data definitions and calls to GPU kernels; the C code is highly
automated. Obviously, real world use cases would require much more
user C code, and the authors note that the Twig-generated code
would usually be a part of a larger program that brings in the
Twig-generated code via #include.

While the paper is an easy read, its notation is too complex.
Section 7 is a good example in itself. I do not see why the
sequence operator needs so much development or why left-based
choice is presented at all.

The paper seems somewhat preliminary as it lacks any performance
results or application results. The paper could be improved by
including some of these. Space could be reclaimed by condensing
some of the "theory of computer languages" material, such as the
spacious figures on page 7. The code samples on pages 10 and 11
should be labeled. On page 10, should some of the symbols be
cudaMemcpyDeviceToHost?

======= Review 3 =======

> *** Comments: Comments to author

It was brief and to the point, but I'd also like to see more code
examples and performance results.

======= Review 4 =======

> *** Comments: Comments to author

The paper proposes a rewriting system to generate GPU code. A set
of syntactic rules can be described to simplify sequences of
CPU-GPU data transfers with kernel launching operations.

The use of rewriting systems for code generation is not new and
has a limited ability to generate efficient codes. The paper does
not provide any insight on how it better handles the usual issues
with this kind of techniques (e.g. for instance the reuse of
buffers, dealing with rewriting choices, no lifetime analysis of
buffers). The paper does not address the optimization between
accelerator code sections. The proposed technique does not seem to
help writing the GPU kernel themselves.

This is very preliminary work and the paper does not provide a
convincing case that such an approach can address something else
than toy codes/issues.
